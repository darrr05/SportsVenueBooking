@page "/schedules"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using SportsVenueBooking.Domain
@using SportsVenueBooking.Data
@implements IAsyncDisposable
@inject IDbContextFactory<SportsVenueBooking.Data.SportsVenueBookingContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="schedules/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.Schedules" Pagination="paginationState">
    @* <PropertyColumn Property="schedule => schedule.SportLocationTimeslotId" /> *@
    <TemplateColumn Context="schedule" Title="Sport">
        @GetSportString(schedule.SportLocationTimeslotId)
    </TemplateColumn>
    <TemplateColumn Context="schedule" Title="Location">
        @GetLocationString(schedule.SportLocationTimeslotId)
    </TemplateColumn>
    <TemplateColumn Context="schedule" Title="Timeslot">
        @GetTimeslotString(schedule.SportLocationTimeslotId)
    </TemplateColumn>
    <PropertyColumn Property="schedule => schedule.AvailableSlots" />
    <PropertyColumn Property="schedule => schedule.ScheduledDate" />
    <PropertyColumn Property="schedule => schedule.DateCreated" />
    <PropertyColumn Property="schedule => schedule.DateUpdated" />
    <PropertyColumn Property="schedule => schedule.CreatedBy" />
    <PropertyColumn Property="schedule => schedule.UpdatedBy" />

    <TemplateColumn Context="schedule">
        <a href="@($"schedules/edit?id={schedule.Id}")">Edit</a> |
        <a href="@($"schedules/details?id={schedule.Id}")">Details</a> |
        <a href="@($"schedules/delete?id={schedule.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="paginationState" />

@code {
    private SportsVenueBookingContext context = default!;
    private IList<SportLocationTimeslot> SportLocationTimeslots;
    private IList<SportLocation> SportLocations;
    private IList<Timeslot> Timeslots;
    private IList<Sport> Sports;
    private IList<Location> Locations;
    private Dictionary<int, Sport> SportsDict = new Dictionary<int, Sport>();
    private Dictionary<int, Location> LocationsDict = new Dictionary<int, Location>();
    private Dictionary<int, Timeslot> TimeslotsDict = new Dictionary<int, Timeslot>();
    PaginationState paginationState = new PaginationState { ItemsPerPage = 1 };

    // GetSportString method to get the sport string
    private string GetSportString(int SportLocationTimeslotId)
    {
        var sportLocation = SportLocationTimeslots.FirstOrDefault(sl => sl.Id == SportLocationTimeslotId);
        if (sportLocation == null) return string.Empty;

        var sport = Sports.FirstOrDefault(s => s.Id == sportLocation.SportLocation.SportId);
        return sport?.Name ?? string.Empty;
    }

    // GetLocationString method to get the location string
    private string GetLocationString(int SportLocationTimeslotId)
    {
        var sportLocation = SportLocationTimeslots.FirstOrDefault(sl => sl.Id == SportLocationTimeslotId);
        if (sportLocation == null) return string.Empty;

        var location = Locations.FirstOrDefault(l => l.Id == sportLocation.SportLocation.LocationId);
        return location?.Name ?? string.Empty;
    }

    // Get Timeslot String method to get the timeslot string
    private string GetTimeslotString(int SportLocationTimeslotId)
    {
        var timeslot = Timeslots.FirstOrDefault(t => t.Id == SportLocationTimeslotId);
        return timeslot == null ?
        string.Empty : $"{timeslot.Description}";
    }

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        // Fetch and initialize the collections for SportLocationTimeslot, Sports, Locations, and Timeslots
        SportLocationTimeslots = context.SportLocationTimeslots.ToList();
        SportLocations = context.SportLocation.ToList();
        Sports = context.Sport.ToList();
        Locations = context.Location.ToList();
        Timeslots = context.Timeslot.ToList();

        // Populate dictionaries for faster lookups if necessary (optional)
        SportsDict = Sports.ToDictionary(s => s.Id);
        LocationsDict = Locations.ToDictionary(l => l.Id);
        TimeslotsDict = Timeslots.ToDictionary(t => t.Id);
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
