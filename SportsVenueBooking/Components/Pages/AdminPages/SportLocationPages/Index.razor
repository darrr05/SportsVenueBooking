@page "/sportlocations"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using SportsVenueBooking.Domain
@using SportsVenueBooking.Data
@implements IAsyncDisposable
@inject IDbContextFactory<SportsVenueBooking.Data.SportsVenueBookingContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="sportlocations/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.SportLocation" Pagination="paginationState">
    @* <PropertyColumn Property="sportlocation => sportlocation.SportId" />
    <PropertyColumn Property="sportlocation => sportlocation.LocationId" /> *@  

    <TemplateColumn Context="SportLocation" Title="Sport">
        @GetSportString(SportLocation.SportId)
    </TemplateColumn>
    <TemplateColumn Context="SportLocation" Title="Location">
        @GetLocationString(SportLocation.LocationId)
    </TemplateColumn>

    <PropertyColumn Property="sportlocation => sportlocation.DateCreated" />
    <PropertyColumn Property="sportlocation => sportlocation.DateUpdated" />
    <PropertyColumn Property="sportlocation => sportlocation.CreatedBy" />
    <PropertyColumn Property="sportlocation => sportlocation.UpdatedBy" />

    <TemplateColumn Context="sportlocation">
        <a href="@($"sportlocations/edit?id={sportlocation.Id}")">Edit</a> |
        <a href="@($"sportlocations/details?id={sportlocation.Id}")">Details</a> |
        <a href="@($"sportlocations/delete?id={sportlocation.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="paginationState" />

@code {
    private SportsVenueBookingContext context = default!;
    private IList<Sport> Sports;
    private IList<Location> Locations;
    private Dictionary<int, Sport> SportsDict = new Dictionary<int, Sport>();
    private Dictionary<int, Location> LocationsDict = new Dictionary<int, Location>();
    PaginationState paginationState = new PaginationState { ItemsPerPage = 1 };

    // GetSportString method to get the sport string
    private string GetSportString(int sportId)
    {
        var sport = Sports.FirstOrDefault(s => s.Id == sportId);
        return sport == null ?
        string.Empty : $"{sport.Name}";
    }

    // GetLocationString method to get the location string
    private string GetLocationString(int locationId)
    {
        var location = Locations.FirstOrDefault(l => l.Id == locationId);
        return location == null ?
        string.Empty : $"{location.Name}";
    }

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        // Fetch and initialize Sports and Locations collections
        Sports = context.Sport.ToList();
        Locations = context.Location.ToList();

        // Optionally populate dictionaries for faster lookups
        SportsDict = Sports.ToDictionary(s => s.Id);
        LocationsDict = Locations.ToDictionary(l => l.Id);
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
