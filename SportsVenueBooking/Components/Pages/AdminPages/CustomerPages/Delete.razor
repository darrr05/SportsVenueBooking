@page "/customers/delete"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using SportsVenueBooking.Data
@using SportsVenueBooking.Domain
@inject IDbContextFactory<SportsVenueBooking.Data.SportsVenueBookingContext> DbFactory
@inject UserManager<SportsVenueBookingUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this customer and their associated user account?</p>

<div>
    <h2>Customer</h2>
    <hr />
    @if (customer is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@customer.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@customer.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@customer.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PhoneNumber</dt>
            <dd class="col-sm-10">@customer.PhoneNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Age</dt>
            <dd class="col-sm-10">@customer.Age</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@customer.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@customer.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@customer.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@customer.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@customer.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="customer" OnValidSubmit="DeleteCustomer" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(customer is null)">Delete</button> |
            <a href="/customers">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Customer? customer;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        customer = await context.Customer.FirstOrDefaultAsync(m => m.Id == Id);

        if (customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCustomer()
    {
        using var context = DbFactory.CreateDbContext();

        // Find the user by email that matches the customer's email
        var user = await UserManager.FindByEmailAsync(customer?.Email);

        if (user != null)
        {
            // Delete the user
            var result = await UserManager.DeleteAsync(user);

            if (!result.Succeeded)
            {
                // Handle error deleting user
                NavigationManager.NavigateTo("error"); // redirect to an error page or display message
                return;
            }
        }

        // Delete the customer from the database
        context.Customer.Remove(customer!);
        await context.SaveChangesAsync();

        // Redirect to the customer list page after deletion
        NavigationManager.NavigateTo("/customers");
    }
}
