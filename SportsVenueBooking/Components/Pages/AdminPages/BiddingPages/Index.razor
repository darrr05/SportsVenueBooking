@page "/biddings"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using SportsVenueBooking.Domain
@using SportsVenueBooking.Data
@implements IAsyncDisposable
@inject IDbContextFactory<SportsVenueBooking.Data.SportsVenueBookingContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="biddings/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.Bidding">
    @* <PropertyColumn Property="bidding => bidding.SportLocationTimeSlotId" /> *@
    <TemplateColumn Context="bidding" Title="Sport">
        @GetSportString(bidding.SportLocationTimeSlotId)
    </TemplateColumn>
    <TemplateColumn Context="bidding" Title="Location">
        @GetLocationString(bidding.SportLocationTimeSlotId)
    </TemplateColumn>
    <TemplateColumn Context="bidding" Title="Timeslot">
        @GetTimeslotString(bidding.SportLocationTimeSlotId)
    </TemplateColumn>
    <PropertyColumn Property="bidding => bidding.CustomerId" />
    <PropertyColumn Property="bidding => bidding.AppointtedDate" />
    <PropertyColumn Property="bidding => bidding.BidAmount" />
    <PropertyColumn Property="bidding => bidding.BidDate" />
    <PropertyColumn Property="bidding => bidding.BidStatus" />
    <PropertyColumn Property="bidding => bidding.BidEndTime" />
    <PropertyColumn Property="bidding => bidding.DateCreated" />
    <PropertyColumn Property="bidding => bidding.DateUpdated" />
    <PropertyColumn Property="bidding => bidding.CreatedBy" />
    <PropertyColumn Property="bidding => bidding.UpdatedBy" />

    <TemplateColumn Context="bidding">
        <a href="@($"biddings/edit?id={bidding.Id}")">Edit</a> |
        <a href="@($"biddings/details?id={bidding.Id}")">Details</a> |
        <a href="@($"biddings/delete?id={bidding.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private SportsVenueBookingContext context = default!;
    private IList<SportLocationTimeslot> SportLocationTimeslots;
    private IList<Timeslot> Timeslots;
    private IList<Sport> Sports;
    private IList<Location> Locations;
    private IList<Customer> Customers;

    private Dictionary<int, Sport> SportsDict = new Dictionary<int, Sport>();
    private Dictionary<int, Location> LocationsDict = new Dictionary<int, Location>();
    private Dictionary<int, Timeslot> TimeslotsDict = new Dictionary<int, Timeslot>();

    PaginationState paginationState = new PaginationState { ItemsPerPage = 5 };

    // GetSportString method to get the sport string
    private string GetSportString(int? SportLocationTimeslotId)
    {
        var sportLocationTimeslot = SportLocationTimeslots.FirstOrDefault(slt => slt.Id == SportLocationTimeslotId);
        return sportLocationTimeslot?.SportLocation?.Sport?.Name ?? string.Empty;
    }

    private string GetLocationString(int? SportLocationTimeslotId)
    {
        var sportLocationTimeslot = SportLocationTimeslots.FirstOrDefault(slt => slt.Id == SportLocationTimeslotId);
        return sportLocationTimeslot?.SportLocation?.Location?.Name ?? string.Empty;
    }

    private string GetTimeslotString(int? SportLocationTimeslotId)
    {
        var sportLocationTimeslot = SportLocationTimeslots.FirstOrDefault(slt => slt.Id == SportLocationTimeslotId);
        return sportLocationTimeslot?.Timeslot?.Description ?? string.Empty;
    }


    // GetCustomerString method to get the customer string
    private string GetCustomerString(int customerId)
    {
        var customer = Customers.FirstOrDefault(c => c.Id == customerId);
        return customer == null ?
        string.Empty : $"{customer.FirstName} {customer.LastName}   Contact:{customer.PhoneNumber}";
    }

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        // Load SportLocationTimeslots with related data
        SportLocationTimeslots = context.SportLocationTimeslots
            .Include(slt => slt.SportLocation)
                .ThenInclude(sl => sl.Sport)
            .Include(slt => slt.SportLocation)
                .ThenInclude(sl => sl.Location)
            .Include(slt => slt.Timeslot)
            .ToList();

        // Load other necessary tables
        Customers = context.Customer.ToList();
    }


    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}