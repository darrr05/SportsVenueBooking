@page "/sportlocationtimeslots/create"
@using Microsoft.EntityFrameworkCore
@using SportsVenueBooking.Domain
@inject IDbContextFactory<SportsVenueBooking.Data.SportsVenueBookingContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>SportLocationTimeslot</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="SportLocationTimeslot" OnValidSubmit="AddSportLocationTimeslot" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="sportlocationid" class="form-label">SportLocationId:</label> 
                <InputNumber id="sportlocationid" @bind-Value="SportLocationTimeslot.SportLocationId" class="form-control" /> 
                <ValidationMessage For="() => SportLocationTimeslot.SportLocationId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="timeslotid" class="form-label">TimeslotId:</label> 
                <InputNumber id="timeslotid" @bind-Value="SportLocationTimeslot.TimeslotId" class="form-control" /> 
                <ValidationMessage For="() => SportLocationTimeslot.TimeslotId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label> 
                <InputNumber id="price" @bind-Value="SportLocationTimeslot.Price" class="form-control" /> 
                <ValidationMessage For="() => SportLocationTimeslot.Price" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="SportLocationTimeslot.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => SportLocationTimeslot.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="SportLocationTimeslot.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => SportLocationTimeslot.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="SportLocationTimeslot.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => SportLocationTimeslot.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="SportLocationTimeslot.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => SportLocationTimeslot.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/sportlocationtimeslots">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private SportLocationTimeslot SportLocationTimeslot { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddSportLocationTimeslot()
    {
        using var context = DbFactory.CreateDbContext();
        context.SportLocationTimeslots.Add(SportLocationTimeslot);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/sportlocationtimeslots");
    }
}
