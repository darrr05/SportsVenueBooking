@page "/Checkout"
@using Microsoft.EntityFrameworkCore
@using SportsVenueBooking.Data
@using SportsVenueBooking.Domain
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Text.Json
@rendermode InteractiveServer

<head>
    <link rel="stylesheet" href="styles/Checkout.css">
</head>

<div class="container">
    <div class="header">
        <img src="images/logo.jpg" alt="SportsSlot Logo" class="logo" />
        <h1>SPORTSLOT</h1>
    </div>

    <div class="checkout-summary">
        <h3>Booking Summary</h3>
        <div class="summary-item">
            <span>Sport:</span>
            <span>@SelectedSportName</span>
        </div>
        <div class="summary-item">
            <span>Location:</span>
            <span>@SelectedLocationName</span>
        </div>
        <div class="summary-item">
            <span>Date:</span>
            <span>@SelectedDate.ToString("yyyy-MM-dd")</span>
        </div>
        <div class="summary-item">
            <span>Time Slots:</span>
            <ul>
                @foreach (var timeslot in SelectedTimeslots)
                {
                    <li>@timeslot.Description - $@timeslot.Price</li>
                }
            </ul>
        </div>
        <div class="summary-item">
            <span>Total Price:</span>
            <span>$@TotalPrice</span>
        </div>
    </div>

    <div class="confirm-section">
        <div id="confirm-element"></div>
        <button class="confirm-button" @onclick="ProcessBooking" id="confirm-button" disabled="@(!IsConfirmButtonEnabled)">Confirm</button>
        <div id="payment-message" class="payment-message"></div>
    </div>
</div>

@code {
    private string SelectedSportName { get; set; }
    private string SelectedLocationName { get; set; }
    private DateTime SelectedDate { get; set; }
    private List<SelectedTimeslot> SelectedTimeslots { get; set; } = new();
    private double TotalPrice => SelectedTimeslots.Sum(timeslot => timeslot.Price);
    private bool IsConfirmButtonEnabled { get; set; } = true;
    private bool isRendered = false;
    private Customer Customer { get; set; }

    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private SportsVenueBookingContext _context { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private int CustomerId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isRendered)
        {
            SelectedSportName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedSport") ?? "Unknown";
            SelectedLocationName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedLocation") ?? "Unknown";
            string selectedDate = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedDate") ?? DateTime.Now.ToString("yyyy-MM-dd");
            string selectedTimeslotsJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedTimeslots");

            var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
            if (user.Identity.IsAuthenticated)
            {
                var customerEmail = user.FindFirstValue(ClaimTypes.Email);
                Customer = await _context.Customer.FirstOrDefaultAsync(c => c.Email == customerEmail);  // Fetch the customer based on email
                CustomerId = Customer?.Id ?? 0;
            }

            SelectedDate = DateTime.Parse(selectedDate);
            SelectedTimeslots = string.IsNullOrEmpty(selectedTimeslotsJson) ? new List<SelectedTimeslot>() : JsonSerializer.Deserialize<List<SelectedTimeslot>>(selectedTimeslotsJson);

            isRendered = true;
            StateHasChanged();
        }
    }


    private async Task ProcessBooking()
    {
        foreach (var timeslot in SelectedTimeslots)
        {
            await DecrementAvailableSlots(timeslot);
        }

        var booking = await CreateBooking();
        NavigationManager.NavigateTo($"/pay?bookingId={booking.Id}");
    }

    private async Task DecrementAvailableSlots(SelectedTimeslot timeslot)
    {
        var schedule = await _context.Schedules
            .Include(s => s.SportLocationTimeslot)
            .ThenInclude(slt => slt.SportLocation)
            .Where(s => s.SportLocationTimeslot.Timeslot.Description == timeslot.Description
                        && s.SportLocationTimeslot.SportLocation.Location.Name == SelectedLocationName
                        && s.ScheduledDate.Date == SelectedDate.Date)
            .FirstOrDefaultAsync();

        if (schedule != null && schedule.AvailableSlots > 0)
        {
            schedule.AvailableSlots -= 1;
            _context.Schedules.Update(schedule);
            await _context.SaveChangesAsync();
        }
    }

    private async Task<Bookings> CreateBooking()
    {
        var newBooking = new Bookings
            {
                CustomerId = CustomerId,
                BookingDate = SelectedDate,
                TotalAmount = TotalPrice,
                BookingStatus = "Pending",
                IsPaid = false,
                CreatedBy = Customer.FirstName +" "+Customer.LastName,
                UpdatedBy = Customer.FirstName +" "+Customer.LastName,
                DateCreated = DateTime.Now,
                DateUpdated = DateTime.Now
            };

        _context.Bookings.Add(newBooking);
        await _context.SaveChangesAsync();

        // Store the correct SportLocationTimeslot for each selected timeslot
        foreach (var timeslot in SelectedTimeslots)
        {
            var sportLocationTimeslot = await _context.SportLocationTimeslots
                .Include(slt => slt.SportLocation)
                .Include(slt => slt.Timeslot)
                .Where(slt => slt.SportLocation.Location.Name == SelectedLocationName
                              && slt.SportLocation.Sport.Name == SelectedSportName
                              && slt.Timeslot.Description == timeslot.Description)
                .FirstOrDefaultAsync();

            if (sportLocationTimeslot != null)
            {
                newBooking.SportLocationTimeslotId = sportLocationTimeslot.Id;
                _context.Bookings.Update(newBooking);  // Link directly to SportLocationTimeslot
            }
        }

        await _context.SaveChangesAsync();
        return newBooking;
    }

    public class SelectedTimeslot
    {
        public string Description { get; set; }
        public double Price { get; set; }
    }
}
