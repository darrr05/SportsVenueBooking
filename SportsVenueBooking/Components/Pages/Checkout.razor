@page "/Checkout"
@using Microsoft.EntityFrameworkCore
@using SportsVenueBooking.Data
@using SportsVenueBooking.Domain
@using System.Security.Claims
@rendermode InteractiveServer

<head>
    <link rel="stylesheet" href="styles/Checkout.css">
</head>

<div class="container">
    <div class="header">
        <img src="images/logo.jpg" alt="SportsSlot Logo" class="logo" />
        <h1>SPORTSLOT</h1>
    </div>

    <div class="checkout-summary">
        <h3>Booking Summary</h3>
        <div class="summary-item">
            <span>Sport:</span>
            <span>@SelectedSportName</span>
        </div>
        <div class="summary-item">
            <span>Location:</span>
            <span>@SelectedLocationName</span>
        </div>
        <div class="summary-item">
            <span>Date:</span>
            <span>@SelectedDate.ToString("yyyy-MM-dd")</span>
        </div>
        <div class="summary-item">
            <span>Time Slots:</span>
            <div class="summary-item">
                <span>Time Slots:</span>
                <span>@string.Join(", ", SelectedTimeslots.Split(','))</span>
            </div>

        </div>
    </div>

    <div class="payment-section">
        <h3>Payment</h3>
        <div id="payment-element"></div>
        <button class="pay-button" @onclick="ProcessPayment" id="pay-button" disabled="@(!IsPaymentButtonEnabled)">Pay Now</button>
        <div id="payment-message" style="display:none;"></div>
    </div>

    <div class="navigation">
        <button class="back-button" @onclick="NavigateBack">Back</button>
    </div>
</div>

@code {
    private string SelectedSportName { get; set; } = string.Empty;
    private string SelectedLocationName { get; set; } = string.Empty;
    private string SelectedTimeslots { get; set; } = string.Empty;
    private DateTime SelectedDate { get; set; }
    private bool IsFirstRender { get; set; } = true;
    private List<Schedule> Schedules { get; set; } = new();
    private bool IsPaymentButtonEnabled { get; set; } = false;
    private string UserId { get; set; } = string.Empty;
    private int SelectedSportLocationId { get; set; }

    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private SportsVenueBookingContext DbContext { get; set; }
    [Inject] private AuthenticationStateProvider AuthStateProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        UserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;

        if (string.IsNullOrEmpty(UserId))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && IsFirstRender)
        {
            IsFirstRender = false;

            SelectedSportName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedSport") ?? string.Empty;
            SelectedLocationName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedLocation") ?? string.Empty;
            SelectedTimeslots = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedTimeslot") ?? string.Empty;


            var selectedDateString = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedDate");
            if (!string.IsNullOrEmpty(selectedDateString))
            {
                SelectedDate = DateTime.Parse(selectedDateString);
            }

            var sportLocationIdString = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedSportLocationId");
            if (!string.IsNullOrEmpty(sportLocationIdString))
            {
                SelectedSportLocationId = int.Parse(sportLocationIdString);
            }

            Schedules = await DbContext.Schedules
                .Include(s => s.SportLocationTimeslot.Timeslot)
                .Where(s => s.SportLocationTimeslot.SportLocationId == SelectedSportLocationId && s.ScheduledDate == SelectedDate)
                .ToListAsync();

            if (Schedules == null || !Schedules.Any())
            {
                await JSRuntime.InvokeVoidAsync("alert", "No schedules found.");
            }

            if (string.IsNullOrEmpty(SelectedSportName) || string.IsNullOrEmpty(SelectedLocationName))
            {
                NavigationManager.NavigateTo("/Bookings_Sport");
                return;
            }

            IsPaymentButtonEnabled = true;
            StateHasChanged();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/Bookings_Timeslot");
    }

    private async Task ProcessPayment()
    {
        try
        {
            if (string.IsNullOrEmpty(UserId))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please log in to complete your booking.");
                NavigationManager.NavigateTo("/login");
                return;
            }

            var booking = new Bookings
                {
                    CustomerId = int.Parse(UserId),
                    SportName = SelectedSportName,
                    LocationName = SelectedLocationName,
                    BookingDate = SelectedDate,
                    TotalAmount = Schedules.Sum(s => (double)s.SportLocationTimeslot.Price),
                    BookingStatus = "Paid"
                };

            await DbContext.Bookings.AddAsync(booking);
            await DbContext.SaveChangesAsync();

            await JSRuntime.InvokeVoidAsync("sessionStorage.clear");
            await JSRuntime.InvokeVoidAsync("alert", "Payment successful! Redirecting to dashboard...");
            NavigationManager.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error during payment processing: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred. Please try again later.");
        }
    }
}
