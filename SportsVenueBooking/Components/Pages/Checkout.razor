@page "/Checkout"
@using Microsoft.EntityFrameworkCore
@using SportsVenueBooking.Data
@using SportsVenueBooking.Domain
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Text.Json
@rendermode InteractiveServer

<head>
    <link rel="stylesheet" href="styles/Checkout.css">
</head>

<div class="container">
    <div class="header">
        <img src="images/logo.jpg" alt="SportsSlot Logo" class="logo" />
        <h1>SPORTSLOT</h1>
    </div>

    <div class="checkout-summary">
        <h3>Booking Summary</h3>
        <div class="summary-item">
            <span>Sport:</span>
            <span>@SelectedSportName</span>
        </div>
        <div class="summary-item">
            <span>Location:</span>
            <span>@SelectedLocationName</span>
        </div>
        <div class="summary-item">
            <span>Date:</span>
            <span>@SelectedDate.ToString("yyyy-MM-dd")</span>
        </div>
        <div class="summary-item">
            <span>Time Slots:</span>
            <ul>
                @foreach (var timeslot in SelectedTimeslots)
                {
                    <li>@timeslot.Description - $@timeslot.Price</li>
                }
            </ul>
        </div>
        <div class="summary-item">
            <span>Total Price:</span>
            <span>$@TotalPrice</span>
        </div>
    </div>

    <div class="confirm-section">
        <div id="confirm-element"></div>
        <button class="confirm-button" @onclick="ProcessBooking" id="confirm-button" disabled="@(!IsConfirmButtonEnabled)">Confirm</button>
        <div id="payment-message" class="payment-message"></div>
    </div>
</div>

@code {
    private string SelectedSportName { get; set; }
    private string SelectedLocationName { get; set; }
    private DateTime SelectedDate { get; set; }
    private List<SelectedTimeslot> SelectedTimeslots { get; set; } = new();
    private double TotalPrice => SelectedTimeslots.Sum(timeslot => timeslot.Price);
    private bool IsConfirmButtonEnabled { get; set; } = true;
    private bool isRendered = false;
    private Customer Customer { get; set; }

    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private SportsVenueBookingContext _context { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private int CustomerId { get; set; }
    private int SportLocationId { get; set; }
    private int? TimeslotId1 { get; set; }
    private int? TimeslotId2 { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isRendered)
        {
            SelectedSportName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedSport") ?? "Unknown";
            SelectedLocationName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedLocation") ?? "Unknown";
            string selectedDate = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedDate") ?? DateTime.Now.ToString("yyyy-MM-dd");
            string selectedTimeslotsJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedTimeslots");

            SelectedDate = DateTime.Parse(selectedDate);
            SelectedTimeslots = string.IsNullOrEmpty(selectedTimeslotsJson) ? new List<SelectedTimeslot>() : JsonSerializer.Deserialize<List<SelectedTimeslot>>(selectedTimeslotsJson);

            var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
            if (user.Identity.IsAuthenticated)
            {
                var customerEmail = user.FindFirstValue(ClaimTypes.Email);
                var customer = await _context.Customer.FirstOrDefaultAsync(c => c.Email == customerEmail);
                CustomerId = customer?.Id ?? 0;
                Customer = await _context.Customer.FirstOrDefaultAsync(c => c.Email == customerEmail);  // Fetch the customer based on email
                CustomerId = Customer?.Id ?? 0;
            }

            // Retrieve SportLocationId based on selected sport and location
            var sportLocation = await _context.SportLocation
                .FirstOrDefaultAsync(sl => sl.Sport.Name == SelectedSportName && sl.Location.Name == SelectedLocationName);
            SportLocationId = sportLocation?.Id ?? 0;

            // Retrieve SportLocationTimeslotId1 and SportLocationTimeslotId2 based on selected timeslots
            if (SelectedTimeslots.Count > 0)
            {
                var timeslot1 = await _context.SportLocationTimeslots
                    .FirstOrDefaultAsync(slt => slt.SportLocationId == SportLocationId && slt.Timeslot.Description == SelectedTimeslots[0].Description);
                TimeslotId1 = timeslot1?.Id;
            }

            if (SelectedTimeslots.Count > 1)
            {
                var timeslot2 = await _context.SportLocationTimeslots
                    .FirstOrDefaultAsync(slt => slt.SportLocationId == SportLocationId && slt.Timeslot.Description == SelectedTimeslots[1].Description);
                TimeslotId2 = timeslot2?.Id;
            }

            isRendered = true;
            StateHasChanged();
        }
    }

    private async Task ProcessBooking()
    {
        var booking = new Bookings
            {
                CustomerId = CustomerId,
                SportLocationTimeslotId1 = TimeslotId1,   // Using the correct SportLocationTimeslot ID
                SportLocationTimeslotId2 = TimeslotId2,   // Using the correct SportLocationTimeslot ID
                BookingDate = SelectedDate,
                TotalAmount = TotalPrice,
                BookingStatus = "Pending",
                IsPaid = false,
                PaymentDate = null,
                CreatedBy = Customer.FirstName + " " + Customer.LastName,
                UpdatedBy = Customer.FirstName + " " + Customer.LastName,
                DateCreated = DateTime.Now,
                DateUpdated = DateTime.Now
            };

        var schedule1 = await _context.Schedules
        .FirstOrDefaultAsync(s => s.SportLocationTimeslotId == TimeslotId1 && s.ScheduledDate.Date == SelectedDate.Date);

        if (schedule1 != null && schedule1.AvailableSlots > 0)
        {
            schedule1.AvailableSlots -= 1; // Decrement the available slots by 1 for the correct date
        }

        var schedule2 = await _context.Schedules
            .FirstOrDefaultAsync(s => s.SportLocationTimeslotId == TimeslotId2 && s.ScheduledDate.Date == SelectedDate.Date);

        if (schedule2 != null && schedule2.AvailableSlots > 0)
        {
            schedule2.AvailableSlots -= 1; // Decrement the available slots by 1 for the correct date
        }

        // Save the changes to schedules (available slots)
        if (schedule1 != null) _context.Update(schedule1);
        if (schedule2 != null) _context.Update(schedule2);

        _context.Bookings.Add(booking);
        await _context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/pay?bookingId={booking.Id}");
    }

    public class SelectedTimeslot
    {
        public string Description { get; set; }
        public double Price { get; set; }
    }
}