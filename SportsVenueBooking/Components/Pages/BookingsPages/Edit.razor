@page "/bookings/edit"
@using Microsoft.EntityFrameworkCore
@using SportsVenueBooking.Domain
@inject IDbContextFactory<SportsVenueBooking.Data.SportsVenueBookingContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Bookings</h2>
<hr />
@if (Bookings is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Bookings" OnValidSubmit="UpdateBookings" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Bookings.Id" value="@Bookings.Id" />
                <div class="mb-3">
                    <label for="sportname" class="form-label">SportName:</label>
                    <InputText id="sportname" @bind-Value="Bookings.SportName" class="form-control" />
                    <ValidationMessage For="() => Bookings.SportName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="locationname" class="form-label">LocationName:</label>
                    <InputText id="locationname" @bind-Value="Bookings.LocationName" class="form-control" />
                    <ValidationMessage For="() => Bookings.LocationName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="timeslotdescription" class="form-label">TimeslotDescription:</label>
                    <InputText id="timeslotdescription" @bind-Value="Bookings.TimeslotDescription" class="form-control" />
                    <ValidationMessage For="() => Bookings.TimeslotDescription" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="sportid" class="form-label">SportId:</label>
                    <InputNumber id="sportid" @bind-Value="Bookings.SportId" class="form-control" />
                    <ValidationMessage For="() => Bookings.SportId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="locationid" class="form-label">LocationId:</label>
                    <InputNumber id="locationid" @bind-Value="Bookings.LocationId" class="form-control" />
                    <ValidationMessage For="() => Bookings.LocationId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="timeslotid" class="form-label">TimeslotId:</label>
                    <InputNumber id="timeslotid" @bind-Value="Bookings.TimeslotId" class="form-control" />
                    <ValidationMessage For="() => Bookings.TimeslotId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Bookings.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Bookings.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Bookings.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Bookings.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Bookings.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Bookings.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Bookings.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Bookings.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/bookings">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Bookings? Bookings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Bookings ??= await context.Bookings.FirstOrDefaultAsync(m => m.Id == Id);

        if (Bookings is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBookings()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Bookings!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BookingsExists(Bookings!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/bookings");
    }

    private bool BookingsExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Bookings.Any(e => e.Id == id);
    }
}
