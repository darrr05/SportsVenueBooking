@page "/bookings/create"
@using Microsoft.EntityFrameworkCore
@using SportsVenueBooking.Data
@using SportsVenueBooking.Domain
@inject IDbContextFactory<SportsVenueBooking.Data.SportsVenueBookingContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Bookings</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Bookings" OnValidSubmit="AddBookings" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="dateout" class="form-label">DateOut:</label>
                <InputDate id="dateout" @bind-Value="Bookings.DateOut" class="form-control" />
                <ValidationMessage For="() => Bookings.DateOut" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="datein" class="form-label">DateIn:</label>
                <InputDate id="datein" @bind-Value="Bookings.DateIn" class="form-control" />
                <ValidationMessage For="() => Bookings.DateIn" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="scheduleid" class="form-label">ScheduleId:</label>
                <InputSelect id="vehicleId" @bind-Value="Bookings.ScheduleId" class="form-control">
                    <option value="">-- Select Schedule --</option>
                    @if (Schedules != null)
                    {
                        foreach (var schedule in Schedules)
                        {
                            <option value="@schedule.Id">
                                @SportLocationsDict[schedule.SportLocation.SportId].Id -
                                @SportLocationsDict[schedule.SportLocation.LocationId].Id -
                                @TimeslotsDict[schedule.TimeslotId].Description
                            </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="() => Bookings.ScheduleId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="customerid" class="form-label">CustomerId:</label>
                <InputSelect id="customerId" @bind-Value="Bookings.CustomerId" class="form-control">
                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="() => Bookings.CustomerId" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary" disabled="@(Bookings.ScheduleId == null)">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/bookings">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Bookings Bookings { get; set; } = new Bookings
        {
            DateOut = DateTime.Now,
            DateIn = DateTime.Now.AddDays(1)
        };

    private SportsVenueBookingContext context = default!;
    private IList<Schedule> Schedules;
    private IList<Customer> Customers;
    private Dictionary<int, SportLocation> SportLocationsDict = new Dictionary<int, SportLocation>();
    private Dictionary<int, Timeslot> TimeslotsDict = new Dictionary<int, Timeslot>();

    private string userId = "System";
    private bool isAdmin = false;

    @inject AuthenticationStateProvider authenticationStateProvider

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            isAdmin = user.IsInRole("Administrator");
        }
        context = DbFactory.CreateDbContext();
        Schedules = context.Schedules.ToList();
        Customers = context.Customer.Where(c => c.CreatedBy == userId).ToList();
        if (isAdmin)
        {
            Customers = context.Customer.ToList();
        }
        SportLocationsDict = context.SportLocation.ToDictionary(o => o.Id, o => o);
        TimeslotsDict = context.Timeslot.ToDictionary(o => o.Id, o => o);
    }

    private async Task AddBookings()
    {
        using var context = DbFactory.CreateDbContext();

        Bookings.CreatedBy = userId;
        Bookings.UpdatedBy = userId;
        Bookings.DateCreated = DateTime.Now;
        Bookings.DateUpdated = DateTime.Now;

        context.Bookings.Add(Bookings);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/bookings");
    }

    private List<Timeslot> SelectedTimeslots { get; set; } = new List<Timeslot>();

    private void SelectTimeslot(Timeslot timeslot)
    {
        if (SelectedTimeslots.Contains(timeslot))
        {
            SelectedTimeslots.Remove(timeslot); // Deselect if already selected
        }
        else if (SelectedTimeslots.Count < 2)
        {
            SelectedTimeslots.Add(timeslot); // Add if less than two timeslots are selected
        }
    }

    private async Task ConfirmBooking()
    {
        if (SelectedTimeslots.Count > 0)
        {
            foreach (var timeslot in SelectedTimeslots)
            {
                Bookings.ScheduleId = timeslot.Id;
                // Add your booking logic here
            }
        }
        else
        {
            // Handle case if no timeslot is selected
        }
    }
}
