@page "/dashboard"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using SportsVenueBooking.Data
@using SportsVenueBooking.Domain
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject SportsVenueBookingContext _context

<h3>Your Bookings</h3>

<head>
    <link rel="stylesheet" href="styles/BookingDashboard.css">
</head>

@if (Bookings.Any())
{
    @foreach (var booking in Bookings)
    {
        <div class="booking-item">
            <p><strong>Booking ID:</strong> @booking.Id</p>

            @if (booking.SportLocationTimeslot1 != null)
            {
                <p><strong>Sport:</strong> @(booking.SportLocationTimeslot1.SportLocation?.Sport?.Name ?? "No Sport")</p>
                <p><strong>Location:</strong> @(booking.SportLocationTimeslot1.SportLocation?.Location?.Name ?? "No Location")</p>
                <p><strong>Time Slot 1:</strong> @(booking.SportLocationTimeslot1.Timeslot?.Description ?? "No Timeslot")</p>
            }

            @if (booking.SportLocationTimeslot2 != null)
            {
                <p><strong>Time Slot 2:</strong> @(booking.SportLocationTimeslot2.Timeslot?.Description ?? "No Timeslot")</p>
            }

            <p><strong>Date:</strong> @booking.BookingDate.ToString("yyyy-MM-dd")</p>
            <p><strong>Status:</strong> @booking.BookingStatus</p>

            @if (booking.BookingStatus == "Pending")
            {
                <button class="btn btn-primary" @onclick="() => GoToPayment(booking.Id)">Go to Payment</button>
                <button class="btn btn-danger" @onclick="() => OpenCancellationModal(booking.Id)">Cancel Booking</button>
            }
            else if (booking.BookingStatus == "Paid")
            {
                <button class="btn btn-danger" @onclick="() => OpenCancellationModal(booking.Id)">Cancel Booking</button>
            }
        </div>
    }
}
else
{
    <p>No bookings found.</p>
}

<!-- Cancellation Modal -->
@if (ShowCancellationModal)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Cancel Booking</h5>
                    <button type="button" class="close" @onclick="CloseCancellationModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <label for="CancellationReason">Cancellation Reason</label>
                    <textarea id="CancellationReason" class="form-control" @bind="CancellationReason" rows="3"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCancellationModal">Close</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmCancellation">Confirm Cancellation</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Bookings> Bookings { get; set; } = new();
    private string CancellationReason { get; set; }
    private int BookingIdToCancel { get; set; }
    private bool ShowCancellationModal { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var customerEmail = user.FindFirstValue(ClaimTypes.Email);
        var customer = await _context.Customer.FirstOrDefaultAsync(c => c.Email == customerEmail);

        if (customer == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        await LoadBookings(customer.Id);
    }

    private async Task LoadBookings(int customerId)
    {
        Bookings = await _context.Bookings
            .Include(b => b.SportLocationTimeslot1)
                .ThenInclude(slt => slt.SportLocation)
                    .ThenInclude(sl => sl.Sport)
            .Include(b => b.SportLocationTimeslot1)
                .ThenInclude(slt => slt.SportLocation)
                    .ThenInclude(sl => sl.Location)
            .Include(b => b.SportLocationTimeslot1)
                .ThenInclude(slt => slt.Timeslot)
            .Include(b => b.SportLocationTimeslot2)
                .ThenInclude(slt => slt.Timeslot)
            .Where(b => b.CustomerId == customerId)
            .ToListAsync();
    }


    private void OpenCancellationModal(int bookingId)
    {
        // Store the booking ID and open the modal
        BookingIdToCancel = bookingId;
        ShowCancellationModal = true;
    }

    private void CloseCancellationModal()
    {
        // Close the modal
        ShowCancellationModal = false;
        CancellationReason = string.Empty;
    }

    private async Task ConfirmCancellation()
    {
        if (string.IsNullOrEmpty(CancellationReason))
        {
            // Show a warning if no cancellation reason is provided
            return;
        }

        var booking = await _context.Bookings.FindAsync(BookingIdToCancel);
        if (booking != null)
        {
            // Set the booking status to "Cancelled" and save cancellation details
            booking.BookingStatus = "Cancelled";
            booking.CancellationDate = DateTime.Now;
            booking.CancellationReason = CancellationReason;

            // Increment the schedule availability (if needed)
            if (booking.SportLocationTimeslot1 != null)
            {
                var sportLocationTimeslot1 = booking.SportLocationTimeslot1;
                var schedule1 = await _context.Schedules
                    .FirstOrDefaultAsync(s => s.SportLocationTimeslotId == sportLocationTimeslot1.Id);

                if (schedule1 != null)
                {
                    // Increment or update the schedule to reflect the cancellation
                    schedule1.AvailableSlots += 1; // Adjust this logic based on how your schedule is set up
                    _context.Schedules.Update(schedule1);
                }
            }

            if (booking.SportLocationTimeslot2 != null)
            {
                var sportLocationTimeslot2 = booking.SportLocationTimeslot2;
                var schedule2 = await _context.Schedules
                    .FirstOrDefaultAsync(s => s.SportLocationTimeslotId == sportLocationTimeslot2.Id);

                if (schedule2 != null)
                {
                    // Increment or update the schedule to reflect the cancellation
                    schedule2.AvailableSlots += 1; // Adjust this logic based on your schedule setup
                    _context.Schedules.Update(schedule2);
                }
            }

            _context.Bookings.Update(booking);
            await _context.SaveChangesAsync();

            // Reload the bookings and close the modal
            await LoadBookings(booking.CustomerId);
            CloseCancellationModal();
        }
    }


    private void GoToPayment(int bookingId)
    {
        NavigationManager.NavigateTo($"/pay?bookingId={bookingId}");
    }
}