@page "/dashboard"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using SportsVenueBooking.Data
@using SportsVenueBooking.Domain
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Your Bookings</h3>

@if (Bookings.Any())
{
    @foreach (var booking in Bookings)
    {
        <div class="booking-item">
            <p><strong>Booking ID:</strong> @booking.Id</p>
            <p><strong>Sport:</strong> @booking.SportLocationTimeslot?.SportLocation?.Sport?.Name</p>
            <p><strong>Location:</strong> @booking.SportLocationTimeslot?.SportLocation?.Location?.Name</p>
            <p><strong>Time Slot:</strong> @booking.SportLocationTimeslot?.Timeslot?.Description</p>
            <p><strong>Date:</strong> @booking.BookingDate.ToString("yyyy-MM-dd")</p>
            <p><strong>Status:</strong> @booking.BookingStatus</p>
        </div>
    }
}
else
{
    <p>No bookings found.</p>
}

@code {
    private List<Bookings> Bookings { get; set; } = new();
    [Inject] private SportsVenueBookingContext _context { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    private string CustomerEmail { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("customerid", out var customerIdString) && int.TryParse(customerIdString, out var customerId))
        {
            await LoadBookings(customerId);
        }
        else
        {
            var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
            if (user.Identity.IsAuthenticated)
            {
                CustomerEmail = user.FindFirstValue(ClaimTypes.Email);
                var customer = await _context.Customer.FirstOrDefaultAsync(c => c.Email == CustomerEmail);
                if (customer != null)
                {
                    await LoadBookings(customer.Id);
                }
                else
                {
                    NavigationManager.NavigateTo("/login");
                }
            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }
        }
    }

    private async Task LoadBookings(int customerId)
    {
        // Load the sport location timeslots with necessary relationships
        Bookings = await _context.Bookings
            .Include(slt => slt.SportLocationTimeslot) // Ensure we include the SportLocation
                .ThenInclude(sl => sl.SportLocation.Sport) // Include the Sport related entity
            .Include(slt => slt.SportLocationTimeslot) // Again include the SportLocation
                .ThenInclude(sl => sl.SportLocation.Location) // Include the Location related entity
            .Include(slt => slt.SportLocationTimeslot.Timeslot) // Include the Timeslot entity
            .ToListAsync();
    }
}