@page "/Bookings_Timeslot"
@using Microsoft.EntityFrameworkCore
@using SportsVenueBooking.Data
@using SportsVenueBooking.Domain
@using System.Text.Json
@rendermode InteractiveServer

<PageTitle>Bookings_Timeslot</PageTitle>

<head>
    <link rel="stylesheet" href="styles/BookingTimeslot.css">
</head>

<div class="container">
    <div class="header">
        <img src="images/logo.jpg" alt="SportsSlot Logo" class="logo" />
        <h1>SPORTSLOT</h1>
    </div>

    <h3>Choose Timeslots</h3>

    <div class="date-picker">
        <label for="selectedDate">Select Date:</label>
        <input type="date" id="selectedDate" @bind="SelectedDate" />
    </div>

    <div class="timeslot-grid">
        @if (Schedules.Any())
        {
            @foreach (var schedule in Schedules)
            {
                <button class="timeslot-button @(SelectedSchedules.Contains(schedule) ? "selected" : "")"
                        @onclick="() => SelectSchedule(schedule)"
                        disabled="@(schedule.AvailableSlots == 0)"
                        style="@(schedule.AvailableSlots == 0 ? "background-color: gray; cursor: not-allowed;" : "")">
                    @schedule.SportLocationTimeslot.Timeslot.Description (@schedule.AvailableSlots slots left)
                </button>
            }
        }
        else
        {
            <p>No available timeslots for the selected date.</p>
        }
    </div>

    <div class="navigation">
        <a href="/Bookings_Location" class="back-to-location">Back</a>
        <button class="confirm-button" @onclick="ConfirmBooking" disabled="@(SelectedSchedules.Count == 0)">Confirm</button>
    </div>
</div>

@code {
    private DateTime _selectedDate;
    private List<Schedule> Schedules { get; set; } = new();
    private List<Schedule> SelectedSchedules { get; set; } = new();
    private string SelectedSportName { get; set; }
    private string SelectedLocationName { get; set; }

    [Inject] private SportsVenueBookingContext DbContext { get; set; }
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    private DateTime SelectedDate
    {
        get => _selectedDate;
        set
        {
            if (_selectedDate != value)
            {
                _selectedDate = value;
                _ = JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "SelectedDate", _selectedDate.ToString("yyyy-MM-dd"));
                SelectedSchedules.Clear();  // Clear previous selections
                _ = LoadSchedules(); // Reload schedules when the date is changed
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SelectedSportName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedSport");
            SelectedLocationName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedLocation");

            if (string.IsNullOrEmpty(SelectedSportName) || string.IsNullOrEmpty(SelectedLocationName))
            {
                NavigationManager.NavigateTo("/Bookings_Sport"); // Navigate if not selected
            }
            else
            {
                await LoadSchedules(); // Fetch schedules after initialization
                StateHasChanged(); // Trigger re-render
            }
        }
    }

    private async Task LoadSchedules()
    {
        Schedules = await DbContext.Schedules
            .Include(s => s.SportLocationTimeslot)
                .ThenInclude(slt => slt.Timeslot)
            .Where(s => s.ScheduledDate.Date == SelectedDate.Date &&
                        s.SportLocationTimeslot.SportLocation.Sport.Name == SelectedSportName &&
                        s.SportLocationTimeslot.SportLocation.Location.Name == SelectedLocationName)
            .ToListAsync();

        StateHasChanged();  // Trigger a re-render after schedules are loaded
    }

    private void SelectSchedule(Schedule schedule)
    {
        // Toggle the schedule selection
        if (SelectedSchedules.Contains(schedule))
        {
            SelectedSchedules.Remove(schedule); // Deselect if already selected
        }
        else
        {
            if (SelectedSchedules.Count < 2)  // Limit selection to 2 schedules
            {
                SelectedSchedules.Add(schedule); // Select the schedule
            }
        }

        // Store selected timeslot information in sessionStorage
        var selectedTimeslots = SelectedSchedules.Select(s => new
        {
            s.SportLocationTimeslot.Timeslot.Description,
            s.SportLocationTimeslot.Price
        }).ToList();

        var timeslotsJson = JsonSerializer.Serialize(selectedTimeslots);
        _ = JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "SelectedTimeslots", timeslotsJson);

        StateHasChanged(); // Trigger re-render after selection
    }

    private async Task ConfirmBooking()
    {
        if (SelectedSchedules.Any())
        {
            // Notify the user or redirect to the next step
            await JSRuntime.InvokeVoidAsync("alert", "Your timeslots have been reserved!");
            NavigationManager.NavigateTo("/Checkout");
        }
        else
        {
            // Alert the user if no schedules are selected
            await JSRuntime.InvokeVoidAsync("alert", "Please select at least one timeslot.");
        }
    }
}