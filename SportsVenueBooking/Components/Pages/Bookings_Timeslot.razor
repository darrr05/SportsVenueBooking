@page "/Bookings_Timeslot"
@using Microsoft.EntityFrameworkCore
@using SportsVenueBooking.Data
@using SportsVenueBooking.Domain
@rendermode InteractiveServer

<PageTitle>Bookings_Timeslot</PageTitle>

<head>
    <link rel="stylesheet" href="styles/BookingTimeslot.css">
</head>

<div class="container">
    <div class="header">
        <img src="images/logo.jpg" alt="SportsSlot Logo" class="logo" />
        <h1>SPORTSLOT</h1>
    </div>

    <h3>Choose Timeslots</h3>

    <div class="date-picker">
        <label for="selectedDate">Select Date:</label>
        <input type="date" id="selectedDate" @bind="SelectedDate" />
    </div>

    <div class="timeslot-grid">
        @if (Timeslots.Any())
        {
            @foreach (var timeslot in Timeslots)
            {
                <button class="timeslot-button @(SelectedTimeslots.Contains(timeslot) ? "selected" : "")"
                @onclick="() => SelectTimeslot(timeslot)">
                    @timeslot.Description
                </button>
            }
        }
        else
        {
            <p>No available timeslots for the selected date.</p>
        }
    </div>

    <div class="navigation">
        <a href="/Bookings_Location" class="back-to-location">Back</a>
        <button class="confirm-button" @onclick="ConfirmBooking" disabled="@(SelectedTimeslots.Count == 0)">Confirm</button>
    </div>
</div>

@code {
    private DateTime _selectedDate;
    private List<Timeslot> Timeslots { get; set; } = new();
    private List<Timeslot> SelectedTimeslots { get; set; } = new();
    private string SelectedSportName { get; set; }
    private string SelectedLocationName { get; set; }

    [Inject] private SportsVenueBookingContext DbContext { get; set; }
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    private DateTime SelectedDate
    {
        get => _selectedDate;
        set
        {
            if (_selectedDate != value)
            {
                _selectedDate = value;
                _ = JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "SelectedDate", _selectedDate.ToString("yyyy-MM-dd"));
                _ = LoadTimeslots(); // Reload timeslots when the date is changed
            }
        }
    }

    // Initialize the default date
    protected override Task OnInitializedAsync()
    {
        _selectedDate = DateTime.Today;
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SelectedSportName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedSport");
            SelectedLocationName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "SelectedLocation");

            if (string.IsNullOrEmpty(SelectedSportName) || string.IsNullOrEmpty(SelectedLocationName))
            {
                NavigationManager.NavigateTo("/Bookings_Sport"); // Navigate if not selected
            }
            else
            {
                await LoadTimeslots(); // Fetch timeslots after initialization
                StateHasChanged(); // Trigger re-render
            }
        }
    }

    private async Task LoadTimeslots()
    {
        Timeslots = await DbContext.Schedules
            .Where(s => s.ScheduledDate.Date == SelectedDate.Date &&
                        s.SportLocationTimeslot.SportLocation.Sport.Name == SelectedSportName &&
                        s.SportLocationTimeslot.SportLocation.Location.Name == SelectedLocationName &&
                        s.AvailableSlots > 0)
            .Select(s => s.SportLocationTimeslot.Timeslot)  // Select related Timeslot
            .Distinct()
            .ToListAsync();

        StateHasChanged();  // Trigger a re-render after timeslots are loaded
    }



    private async Task SelectTimeslot(Timeslot timeslot)
    {
        // Toggle the timeslot selection
        if (SelectedTimeslots.Contains(timeslot))
        {
            SelectedTimeslots.Remove(timeslot); // Deselect if already selected
        }
        else
        {
            if (SelectedTimeslots.Count < 2)  // Limit selection to 2 timeslots
            {
                SelectedTimeslots.Add(timeslot); // Select the timeslot
            }
        }

        // Store the selected timeslots in sessionStorage
        if (SelectedTimeslots.Any())
        {
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "SelectedTimeslots",
                string.Join(",", SelectedTimeslots.Select(t => t.Description)));
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "SelectedTimeslots");
        }

        StateHasChanged(); // Trigger re-render after selection
    }



    private async Task ConfirmBooking()
    {
        if (SelectedTimeslots.Any())
        {
            foreach (var timeslot in SelectedTimeslots)
            {
                // Find the related schedule entry for the selected timeslot
                var schedule = await DbContext.Schedules
                    .Include(s => s.SportLocationTimeslot)
                    .FirstOrDefaultAsync(s =>
                        s.ScheduledDate == SelectedDate &&
                        s.SportLocationTimeslot.TimeslotId == timeslot.Id &&
                        s.SportLocationTimeslot.SportLocation.Sport.Name == SelectedSportName &&
                        s.SportLocationTimeslot.SportLocation.Location.Name == SelectedLocationName);
                // Handle cases where no schedule is found or slots are unavailable
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "SelectedTimeslots", timeslot.Description);
                await JSRuntime.InvokeVoidAsync("alert", $"timeslot: {SelectedTimeslots}");
            }

            // Save changes (decremented slots only)
            await DbContext.SaveChangesAsync();

            // Notify the user or redirect after successful update
            await JSRuntime.InvokeVoidAsync("alert", "Your timeslots have been reserved!");
            NavigationManager.NavigateTo("/Checkout");
        }
        else
        {
            // Alert the user if no timeslots are selected
            await JSRuntime.InvokeVoidAsync("alert", "Please select at least one timeslot.");
        }
    }

}
