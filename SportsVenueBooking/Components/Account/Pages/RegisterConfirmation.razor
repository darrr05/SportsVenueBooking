@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SportsVenueBooking.Data
@using Microsoft.AspNetCore.Http

@inject UserManager<SportsVenueBookingUser> UserManager
@inject IEmailSender<SportsVenueBookingUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register Confirmation</PageTitle>

<h1>Register Confirmation</h1>

<StatusMessage Message="@statusMessage" />

@if (isEmailConfirmed.HasValue)
{
    if (isEmailConfirmed == true)
    {
        <p>Your email has been successfully confirmed. You can now log in!</p>
    }
    else
    {
        <p>We were unable to confirm your email. Please check your inbox and click the confirmation link. If you did not receive the email, you can request a new one.</p>
        <button @onclick="SendConfirmationEmail" class="btn btn-primary">Resend Confirmation Email</button>
    }
}
else
{
    <p>Checking email confirmation status...</p>
}

@code {
    private string? statusMessage;
    private bool? isEmailConfirmed = null; // To track email confirmation status

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Email))
        {
            statusMessage = "Email parameter is missing.";
            return;
        }

        var user = await UserManager.FindByEmailAsync(Email);

        if (user == null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "User not found.";
            return;
        }

        // Check if the user's email is already confirmed
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        if (isEmailConfirmed == true)
        {
            statusMessage = "Your email has already been confirmed. You can now log in.";
        }
        else
        {
            // Email is not confirmed, generate the confirmation link
            statusMessage = "A confirmation email has been sent to your email address. Please check your inbox to confirm your account.";
        }
    }

    private async Task SendConfirmationEmail()
    {
        var user = await UserManager.FindByEmailAsync(Email);
        if (user == null)
        {
            statusMessage = "User not found.";
            return;
        }

        // Generate email confirmation token and link
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = user.Id, ["code"] = code, ["returnUrl"] = ReturnUrl });

        try
        {
            // Send the confirmation email again
            await EmailSender.SendConfirmationLinkAsync(user, Email, callbackUrl);
            statusMessage = "A new confirmation email has been sent to your email address.";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error sending confirmation email: {ex.Message}";
        }
    }
}
