@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SportsVenueBooking.Data

@inject UserManager<SportsVenueBookingUser> UserManager
@inject IEmailSender<SportsVenueBookingUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<head>
    <link rel="stylesheet" href="styles/forgetpassword.css">
</head>

<!-- Main Container -->
<div class="container"> 
    <!-- Header -->
    <h1 class="header">Forget Password</h1>

    <!-- Form Section -->
    <div class="form-container">
        <h2>Forgot Password</h2>
        <p>Please enter your email to reset the password</p>

        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <!-- Email Input -->
            <div class="form-group">
                <label for="email">Your Email</label>
                <InputText @bind-Value="Input.Email" id="email" class="form-control" placeholder="Enter your email" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary">Confirm</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
            return;
        }

        // Generate password reset token
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        // Base64Url encode the token
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        // Build the reset password URL in the desired format
        var resetPasswordLink = $"https://localhost:7090/Account/ResetPassword?code={code}";

        // Send the password reset link via email
        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(resetPasswordLink));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = "";
    }
}
