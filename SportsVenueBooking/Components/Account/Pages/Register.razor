@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SportsVenueBooking.Data
@using SportsVenueBooking.Domain

@inject UserManager<SportsVenueBookingUser> UserManager
@inject IUserStore<SportsVenueBookingUser> UserStore
@inject SignInManager<SportsVenueBookingUser> SignInManager
@inject IEmailSender<SportsVenueBookingUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager
@inject IServiceProvider ServiceProvider

<PageTitle>Register</PageTitle>

<!-- Reference to the custom CSS -->
<head>
    <link rel="stylesheet" href="styles/register.css">
</head>

<div class="register-page">
    <!-- Logo Section -->
    <div class="logo">
        <img src="images/logo.jpg" alt="Sports Venue Logo" />
    </div>

    <!-- Registration Form Section -->
    <div class="register-container">
        <h1>Register</h1>
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control"
                           autocomplete="firstname" aria-required="true" placeholder="Bill" />
                <label for="firstname">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control"
                           autocomplete="lastname" aria-required="true" placeholder="Gates" />
                <label for="lastname">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control"
                           autocomplete="tel" aria-required="true" placeholder="12345678" />
                <label for="phoneNumber">Phone Number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputNumber @bind-Value="Input.Age" class="form-control"
                             aria-required="true" placeholder="25" />
                <label for="age">Age</label>
                <ValidationMessage For="() => Input.Age" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Address" class="form-control"
                           aria-required="true" placeholder="123 Main Street" />
                <label for="address">Address</label>
                <ValidationMessage For="() => Input.Address" class="text-danger" />
            </div>


            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>

        <!-- Add "Already have an account?" link -->
        <p class="text-center mt-3">
            Already have an account? <a href="/Account/Login">Log in</a>
        </p>
    </div>
</div>

<div class="external-auth-section">
    <section>
        <h3>Use another service to register.</h3>
        <hr />
        <ExternalLoginPicker />
    </section>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        // Retrieve the current user's email for auditing purposes
        var currentUserEmail = Input.Email;

        // Create a new Customer entity with audit fields
        var customer = new Customer
            {
                FirstName = Input.FirstName,
                LastName = Input.LastName,
                Email = Input.Email,
                PhoneNumber = Input.PhoneNumber,
                Age = Input.Age,
                Address = Input.Address,
                DateCreated = DateTime.Now,
                DateUpdated = DateTime.Now,
                CreatedBy = currentUserEmail,
                UpdatedBy = currentUserEmail
            };

        // Save Customer to the database
        using (var scope = ServiceProvider.CreateScope())
        {
            var dbContext = scope.ServiceProvider.GetRequiredService<SportsVenueBookingContext>();
            dbContext.Customer.Add(customer);
            await dbContext.SaveChangesAsync();
        }

        // Assign user role and send confirmation email
        if (!await RoleManager.RoleExistsAsync("User"))
        {
            await RoleManager.CreateAsync(new IdentityRole("User"));
        }
        await UserManager.AddToRoleAsync(user, "User");
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("userId", user.Id));

        Logger.LogInformation("User created a new account with password.");
        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private SportsVenueBookingUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<SportsVenueBookingUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(SportsVenueBookingUser)}'. " +
                $"Ensure that '{nameof(SportsVenueBookingUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<SportsVenueBookingUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<SportsVenueBookingUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [Required]
        [Phone]
        [Display(Name = "Phone Number")]
        public string PhoneNumber { get; set; } = "";

        [Required]
        [Range(1, 120, ErrorMessage = "Age must be between 1 and 120.")]
        [Display(Name = "Age")]
        public int Age { get; set; }

        [Required]
        [Display(Name = "Address")]
        public string Address { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
