// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsVenueBooking.Data;

#nullable disable

namespace SportsVenueBooking.Migrations
{
    [DbContext(typeof(SportsVenueBookingContext))]
    [Migration("20250204064028_AddContactUs")]
    partial class AddContactUs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SportsVenueBooking.Data.SportsVenueBookingUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86313eeb-937b-4366-9fc0-32c3a4e1d6fd",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOUPlku8o0i3UUZy5xEvIvrDICDis+A6hR/mXi7bNEBzc3g9oaKHmA+UyJ2rLjBLzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8af14b8-6bfa-483c-8401-334cac7223a9",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        });
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.Bookings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SportLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("SportLocationTimeslotId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SportLocationId");

                    b.HasIndex("SportLocationTimeslotId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsElderlyDiscount")
                        .HasColumnType("bit");

                    b.Property<int>("MaxUses")
                        .HasColumnType("int");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "5 Bishan St 14, Singapore 579783",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7711),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7726),
                            Name = "Bishan Sports Hall",
                            UpdatedBy = "System",
                            capacity = 5000
                        },
                        new
                        {
                            Id = 2,
                            Address = "57 Anchorvale Rd, Singapore 544964",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7731),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7732),
                            Name = "Sengkang Sports Hall",
                            UpdatedBy = "System",
                            capacity = 2000
                        },
                        new
                        {
                            Id = 3,
                            Address = "21 Jurong East St 31, Singapore 609517",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7735),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7736),
                            Name = "Jurong East Sports Hall",
                            UpdatedBy = "System",
                            capacity = 4000
                        },
                        new
                        {
                            Id = 4,
                            Address = "1 Tampines Walk, Singapore 528523",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7739),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7740),
                            Name = "Tampines Sports Hall",
                            UpdatedBy = "System",
                            capacity = 3500
                        },
                        new
                        {
                            Id = 5,
                            Address = "3 Woodlands St 13, Singapore 738600",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7743),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7744),
                            Name = "Woodlands Sports Hall",
                            UpdatedBy = "System",
                            capacity = 2500
                        },
                        new
                        {
                            Id = 6,
                            Address = "120 Pasir Ris Central, Singapore 519640",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7747),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7748),
                            Name = "Pasir Ris Sports Hall",
                            UpdatedBy = "System",
                            capacity = 2200
                        },
                        new
                        {
                            Id = 7,
                            Address = "1 Yishun Ave 3, Singapore 768101",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7751),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7752),
                            Name = "Yishun Sports Hall",
                            UpdatedBy = "System",
                            capacity = 2700
                        },
                        new
                        {
                            Id = 8,
                            Address = "2 Bukit Batok St 21, Singapore 659604",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7755),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7756),
                            Name = "Bukit Gombak Sports Hall",
                            UpdatedBy = "System",
                            capacity = 3000
                        },
                        new
                        {
                            Id = 9,
                            Address = "473 Stirling Rd, Singapore 148947",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7759),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7760),
                            Name = "Queenstown Sports Centre",
                            UpdatedBy = "System",
                            capacity = 1500
                        },
                        new
                        {
                            Id = 10,
                            Address = "30 Bedok North Dr, Singapore 469658",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7763),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7764),
                            Name = "Bedok Sports Centre",
                            UpdatedBy = "System",
                            capacity = 2200
                        },
                        new
                        {
                            Id = 11,
                            Address = "21 Canberra Link, Singapore 768137",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7767),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7768),
                            Name = "Bukit Canberra Sports Centre",
                            UpdatedBy = "System",
                            capacity = 4000
                        },
                        new
                        {
                            Id = 12,
                            Address = "60 Simei St 1, Singapore 529944",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7771),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7772),
                            Name = "Changi Simei Sports Hall",
                            UpdatedBy = "System",
                            capacity = 1800
                        },
                        new
                        {
                            Id = 13,
                            Address = "23 Serangoon North Ave 1, Singapore 555881",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7775),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7776),
                            Name = "Serangoon Sports Centre",
                            UpdatedBy = "System",
                            capacity = 2800
                        },
                        new
                        {
                            Id = 14,
                            Address = "900 Tiong Bahru Rd, Singapore 158790",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7779),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7780),
                            Name = "Delta Sports Centre",
                            UpdatedBy = "System",
                            capacity = 3500
                        },
                        new
                        {
                            Id = 15,
                            Address = "21 Choa Chu Kang Ave 4, Singapore 689812",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7783),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7784),
                            Name = "Choa Chu Kang Sports Centre",
                            UpdatedBy = "System",
                            capacity = 2500
                        },
                        new
                        {
                            Id = 16,
                            Address = "15 Francis Thomas Dr, Singapore 359342",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7787),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7788),
                            Name = "St. Andrew's Secondary School Sports Hall",
                            UpdatedBy = "System",
                            capacity = 800
                        },
                        new
                        {
                            Id = 17,
                            Address = "1 Raffles Institution Lane, Singapore 575954",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7791),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7792),
                            Name = "Raffles Institution Sports Hall",
                            UpdatedBy = "System",
                            capacity = 600
                        },
                        new
                        {
                            Id = 18,
                            Address = "25 Winstedt Rd, Singapore 227977",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7795),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7796),
                            Name = "Anglo-Chinese School Sports Hall",
                            UpdatedBy = "System",
                            capacity = 900
                        },
                        new
                        {
                            Id = 19,
                            Address = "40 Nanyang Walk, Singapore 639798",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7799),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(7800),
                            Name = "Nanyang Primary School Hall",
                            UpdatedBy = "System",
                            capacity = 500
                        });
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOnCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSlots")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SportLocationTimeslotId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SportLocationTimeslotId");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSlots = 20,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(9188),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(9189),
                            ScheduledDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SportLocationTimeslotId = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            AvailableSlots = 15,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(9198),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(9199),
                            ScheduledDate = new DateTime(2025, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SportLocationTimeslotId = 2,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            AvailableSlots = 25,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(9202),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(9203),
                            ScheduledDate = new DateTime(2025, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SportLocationTimeslotId = 3,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            AvailableSlots = 10,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(9206),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(9207),
                            ScheduledDate = new DateTime(2025, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SportLocationTimeslotId = 4,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            AvailableSlots = 20,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(9210),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(9211),
                            ScheduledDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SportLocationTimeslotId = 6,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sport");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8263),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8265),
                            ImagePath = "images/badminton.png",
                            Name = "Badminton",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8367),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8368),
                            ImagePath = "images/basketball.png",
                            Name = "Basketball",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8371),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8372),
                            ImagePath = "images/beach_volleyball.png",
                            Name = "Beach Volleyball",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8375),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8376),
                            ImagePath = "images/volleyball.png",
                            Name = "Volleyball",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8379),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8380),
                            ImagePath = "images/dance.png",
                            Name = "Dance",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8382),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8383),
                            ImagePath = "images/floorball logo.jpg",
                            Name = "Floorball",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8386),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8387),
                            ImagePath = "images/frisbee logo.png",
                            Name = "Frisbee",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8390),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8391),
                            ImagePath = "images/handball.jpg",
                            Name = "Handball",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8394),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8395),
                            ImagePath = "images/lawnbowl.png",
                            Name = "Lawn Bowl",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8398),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8399),
                            ImagePath = "images/netball.jpg",
                            Name = "Netball",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8402),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8403),
                            ImagePath = "images/petanque.jpg",
                            Name = "Petanque",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8405),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8406),
                            ImagePath = "images/pickleball.jpg",
                            Name = "Pickleball",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8409),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8410),
                            ImagePath = "images/sepak.png",
                            Name = "Sepak",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8413),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8414),
                            ImagePath = "images/squash.png",
                            Name = "Squash",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 15,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8417),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8418),
                            ImagePath = "images/table_tennis.png",
                            Name = "Table Tennis",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8421),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8422),
                            ImagePath = "images/soccer.png",
                            Name = "Soccer",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 17,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8425),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8426),
                            ImagePath = "images/hockey.png",
                            Name = "Hockey",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 18,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8429),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8430),
                            ImagePath = "images/tennis.png",
                            Name = "Tennis",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.SportLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SportId");

                    b.ToTable("SportLocation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8653),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8654),
                            LocationId = 2,
                            SportId = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8657),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8658),
                            LocationId = 1,
                            SportId = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8661),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8662),
                            LocationId = 2,
                            SportId = 2,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8665),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8666),
                            LocationId = 14,
                            SportId = 2,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8669),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8670),
                            LocationId = 1,
                            SportId = 3,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8672),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8673),
                            LocationId = 17,
                            SportId = 3,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8676),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8677),
                            LocationId = 2,
                            SportId = 4,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8680),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8681),
                            LocationId = 15,
                            SportId = 4,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8684),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8685),
                            LocationId = 1,
                            SportId = 5,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8688),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8689),
                            LocationId = 16,
                            SportId = 5,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8691),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8692),
                            LocationId = 3,
                            SportId = 6,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8695),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8696),
                            LocationId = 18,
                            SportId = 6,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8699),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8700),
                            LocationId = 4,
                            SportId = 7,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8703),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8704),
                            LocationId = 5,
                            SportId = 8,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 15,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8706),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8707),
                            LocationId = 6,
                            SportId = 9,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8710),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8711),
                            LocationId = 19,
                            SportId = 9,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 17,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8714),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8715),
                            LocationId = 7,
                            SportId = 10,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 18,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8718),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8719),
                            LocationId = 8,
                            SportId = 11,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 19,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8721),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8723),
                            LocationId = 9,
                            SportId = 12,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 20,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8725),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8726),
                            LocationId = 2,
                            SportId = 12,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 21,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8729),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8730),
                            LocationId = 10,
                            SportId = 13,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 22,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8733),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8734),
                            LocationId = 11,
                            SportId = 14,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 23,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8737),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8738),
                            LocationId = 12,
                            SportId = 15,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 24,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8740),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8741),
                            LocationId = 13,
                            SportId = 16,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 25,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8744),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8745),
                            LocationId = 14,
                            SportId = 17,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.SportLocationTimeslot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SportLocationId")
                        .HasColumnType("int");

                    b.Property<int>("TimeslotId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SportLocationId");

                    b.HasIndex("TimeslotId");

                    b.ToTable("SportLocationTimeslots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 50.0,
                            SportLocationId = 1,
                            TimeslotId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 45.0,
                            SportLocationId = 1,
                            TimeslotId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 55.0,
                            SportLocationId = 2,
                            TimeslotId = 2
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 60.0,
                            SportLocationId = 3,
                            TimeslotId = 3
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 65.0,
                            SportLocationId = 4,
                            TimeslotId = 4
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 50.0,
                            SportLocationId = 1,
                            TimeslotId = 3
                        });
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.Timeslot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Timeslot");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8959),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8961),
                            Description = "08:00 AM - 09:00 AM",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8963),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8964),
                            Description = "09:00 AM - 10:00 AM",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8967),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8968),
                            Description = "10:00 AM - 11:00 AM",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8971),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8972),
                            Description = "11:00 AM - 12:00 PM",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8974),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8975),
                            Description = "12:00 PM - 01:00 PM",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8978),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8979),
                            Description = "01:00 PM - 02:00 PM",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8982),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8983),
                            Description = "02:00 PM - 03:00 PM",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8986),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8987),
                            Description = "03:00 PM - 04:00 PM",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8989),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8990),
                            Description = "04:00 PM - 05:00 PM",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8993),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8994),
                            Description = "05:00 PM - 06:00 PM",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8997),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(8998),
                            Description = "06:00 PM - 07:00 PM",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(9000),
                            DateUpdated = new DateTime(2025, 2, 4, 14, 40, 26, 800, DateTimeKind.Local).AddTicks(9001),
                            Description = "07:00 PM - 08:00 PM",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SportsVenueBooking.Data.SportsVenueBookingUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SportsVenueBooking.Data.SportsVenueBookingUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsVenueBooking.Data.SportsVenueBookingUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SportsVenueBooking.Data.SportsVenueBookingUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.Bookings", b =>
                {
                    b.HasOne("SportsVenueBooking.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsVenueBooking.Domain.SportLocation", "SportLocation")
                        .WithMany()
                        .HasForeignKey("SportLocationId");

                    b.HasOne("SportsVenueBooking.Domain.SportLocationTimeslot", "SportLocationTimeslot")
                        .WithMany()
                        .HasForeignKey("SportLocationTimeslotId");

                    b.HasOne("SportsVenueBooking.Data.SportsVenueBookingUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Customer");

                    b.Navigation("SportLocation");

                    b.Navigation("SportLocationTimeslot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.Payment", b =>
                {
                    b.HasOne("SportsVenueBooking.Domain.Bookings", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("SportsVenueBooking.Domain.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.Schedule", b =>
                {
                    b.HasOne("SportsVenueBooking.Domain.SportLocationTimeslot", "SportLocationTimeslot")
                        .WithMany()
                        .HasForeignKey("SportLocationTimeslotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportLocationTimeslot");
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.SportLocation", b =>
                {
                    b.HasOne("SportsVenueBooking.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsVenueBooking.Domain.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.SportLocationTimeslot", b =>
                {
                    b.HasOne("SportsVenueBooking.Domain.SportLocation", "SportLocation")
                        .WithMany()
                        .HasForeignKey("SportLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsVenueBooking.Domain.Timeslot", "Timeslot")
                        .WithMany()
                        .HasForeignKey("TimeslotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportLocation");

                    b.Navigation("Timeslot");
                });

            modelBuilder.Entity("SportsVenueBooking.Domain.Bookings", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
